name: Laravel x Docker CI/CD Pipeline

on:
  push:
    branches: [ "prod" ]
  pull_request:
    branches: [ "prod" ]

jobs:
  # Job pour exécuter les tests Laravel
  laravel-tests:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Checkout du code
      - uses: actions/checkout@v4

      # Étape 2 : Configurer PHP et les extensions nécessaires
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, pdo_mysql, bcmath

      # Étape 3 : Copier le fichier .env
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      # Étape 4 : Installer les dépendances Composer
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      # Étape 5 : Installer Node.js et NPM (pour construire les assets front-end)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Remplace par ta version de Node.js si nécessaire

      # Étape 6 : Installer les dépendances NPM
      - name: Install NPM dependencies
        run: npm install

      # Étape 7 : Construire les assets front-end avec Vite
      - name: Build assets
        run: npm run build

      # Étape 8 : Générer la clé d'application Laravel
      - name: Generate key
        run: php artisan key:generate

      # Étape 9 : Fixer les permissions des répertoires nécessaires
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      # Étape 10 : Créer la base de données SQLite pour les tests
      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      # Étape 11 : Exécuter les tests (Unit et Feature tests) via PHPUnit
      # - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
      #   env:
      #     DB_CONNECTION: sqlite
      #     DB_DATABASE: database/database.sqlite
      #   run: php artisan test

  # Job pour construire et pousser l'image Docker 
  docker-build:
    runs-on: ubuntu-latest
    needs: laravel-tests 

    steps:
      # Étape 1 : Checkout du code (encore une fois pour ce job)
      - uses: actions/checkout@v4

      # Étape 2 : Login à Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Étape 3 : Construire l'image Docker
      - name: Build Docker image
        run: docker build . --file Dockerfile --tag hakimfidjel/portfolio:latest

      # Étape 4 : Pousser l'image sur Docker Hub
      - name: Push Docker image
        run: docker push hakimfidjel/portfolio:latest
